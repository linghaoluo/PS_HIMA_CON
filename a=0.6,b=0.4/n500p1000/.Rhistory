Test_cov=data.frame(rbind(colSums(Mt),500-colSums(Mt)),row.names=c('0','1'))
Sel_cov=data.frame(rbind(MCP_cov[1,],Test_cov[1,]),row.names=c('Mcpselection','Testing'))
Sel_cov
rm(M,Mt)
# 鍋囬槼鎬?
miss<-c()
for(i in 1:500){
miss[i]<-length(setdiff(rownames(results_C_n300p10000[[i]]),c("M1", "M2","M3", "M4","M5","M6")))
}
round(mean(miss,na.rm = FALSE),4)
fpr<-c()
for (j in 1:500)
{
miss<-c()
fp<-setdiff(rownames(results_C_n300p10000[[j]]),c("M1", "M2","M3", "M4"))
for (i in 1:length(fp))
{
miss[i]= fp[i] %in% rownames(results_C_n300p10000[[j]]) & results_C_n300p10000[[j]][fp[i],'BH.FDR']<0.05
fpr[j]<-sum(miss)
}
}
mean(fpr)
fp_cov<-mean(fpr)
## a*b estimation
{
estimate_ab_Pscw<-matrix(c(rep(0,4000)),500,8,
dimnames=list(NULL,c("M1", "M2","M3", "M4","M5","M6","M7","M8")))
estimate_ab_Iptw<-matrix(c(rep(0,4000)),500,8,
dimnames=list(NULL,c("M1", "M2","M3", "M4","M5","M6","M7","M8")))
estimate_ab_Non<-matrix(c(rep(0,4000)),500,8,
dimnames=list(NULL,c("M1", "M2","M3", "M4","M5","M6","M7","M8")))
estimate_ab_Pscov<-matrix(c(rep(0,4000)),500,8,
dimnames=list(NULL,c("M1", "M2","M3", "M4","M5","M6","M7","M8")))
estimate_ab_Cov<-matrix(c(rep(0,4000)),500,8,
dimnames=list(NULL,c("M1", "M2","M3", "M4","M5","M6","M7","M8")))
for (i in 1:500){
estimate_ab_Pscw[i,1]<-results_Pscw_n500p1000[[i]]["M1",4]
estimate_ab_Pscw[i,2]<-results_Pscw_n500p1000[[i]]["M2",4]
estimate_ab_Pscw[i,3]<-results_Pscw_n500p1000[[i]]["M3",4]
estimate_ab_Pscw[i,4]<-results_Pscw_n500p1000[[i]]["M4",4]
estimate_ab_Pscw[i,5]<-results_Pscw_n500p1000[[i]]["M5",4]
estimate_ab_Pscw[i,6]<-results_Pscw_n500p1000[[i]]["M6",4]
estimate_ab_Pscw[i,7]<-results_Pscw_n500p1000[[i]]["M7",4]
estimate_ab_Pscw[i,8]<-results_Pscw_n500p1000[[i]]["M8",4]
estimate_ab_Iptw[i,1]<-results_Iptw_n500p1000[[i]]["M1",4]
estimate_ab_Iptw[i,2]<-results_Iptw_n500p1000[[i]]["M2",4]
estimate_ab_Iptw[i,3]<-results_Iptw_n500p1000[[i]]["M3",4]
estimate_ab_Iptw[i,4]<-results_Iptw_n500p1000[[i]]["M4",4]
estimate_ab_Iptw[i,5]<-results_Iptw_n500p1000[[i]]["M5",4]
estimate_ab_Iptw[i,6]<-results_Iptw_n500p1000[[i]]["M6",4]
estimate_ab_Iptw[i,7]<-results_Iptw_n500p1000[[i]]["M7",4]
estimate_ab_Iptw[i,8]<-results_Iptw_n500p1000[[i]]["M8",4]
estimate_ab_Non[i,1]<-results_Non_n500p1000[[i]]["M1",4]
estimate_ab_Non[i,2]<-results_Non_n500p1000[[i]]["M2",4]
estimate_ab_Non[i,3]<-results_Non_n500p1000[[i]]["M3",4]
estimate_ab_Non[i,4]<-results_Non_n500p1000[[i]]["M4",4]
estimate_ab_Non[i,5]<-results_Non_n500p1000[[i]]["M5",4]
estimate_ab_Non[i,6]<-results_Non_n500p1000[[i]]["M6",4]
estimate_ab_Non[i,7]<-results_Non_n500p1000[[i]]["M7",4]
estimate_ab_Non[i,8]<-results_Non_n500p1000[[i]]["M8",4]
estimate_ab_Pscov[i,1]<-results_Pscov_n500p1000[[i]]["M1",4]
estimate_ab_Pscov[i,2]<-results_Pscov_n500p1000[[i]]["M2",4]
estimate_ab_Pscov[i,3]<-results_Pscov_n500p1000[[i]]["M3",4]
estimate_ab_Pscov[i,4]<-results_Pscov_n500p1000[[i]]["M4",4]
estimate_ab_Pscov[i,5]<-results_Pscov_n500p1000[[i]]["M5",4]
estimate_ab_Pscov[i,6]<-results_Pscov_n500p1000[[i]]["M6",4]
estimate_ab_Pscov[i,7]<-results_Pscov_n500p1000[[i]]["M7",4]
estimate_ab_Pscov[i,8]<-results_Pscov_n500p1000[[i]]["M8",4]
estimate_ab_Cov[i,1]<-results_Cov_n500p1000[[i]]["M1",4]
estimate_ab_Cov[i,2]<-results_Cov_n500p1000[[i]]["M2",4]
estimate_ab_Cov[i,3]<-results_Cov_n500p1000[[i]]["M3",4]
estimate_ab_Cov[i,4]<-results_Cov_n500p1000[[i]]["M4",4]
estimate_ab_Cov[i,5]<-results_Cov_n500p1000[[i]]["M5",4]
estimate_ab_Cov[i,6]<-results_Cov_n500p1000[[i]]["M6",4]
estimate_ab_Cov[i,7]<-results_Cov_n500p1000[[i]]["M7",4]
estimate_ab_Cov[i,8]<-results_Cov_n500p1000[[i]]["M8",4]
}
est_Pscw=data.frame(rbind(colMeans(estimate_ab_Pscw,na.rm=T),
(colSds(estimate_ab_Pscw,na.rm=T))**2),row.names = c('mean','sd'))
est_Pscw['method']='Pscw'
est_Pscov=data.frame(rbind(colMeans(estimate_ab_Pscov,na.rm=T),
(colSds(estimate_ab_Pscov,na.rm=T))**2),row.names = c('mean','sd'))
est_Pscov['method']='Pscov'
est_Iptw=data.frame(rbind(colMeans(estimate_ab_Iptw,na.rm=T),
(colSds(estimate_ab_Iptw,na.rm=T))**2),row.names = c('mean','sd'))
est_Iptw['method']='Iptw'
est_Cov=data.frame(rbind(colMeans(estimate_ab_Cov,na.rm=T),
(colSds(estimate_ab_Cov,na.rm=T))**2),row.names = c('mean','sd'))
est_Cov['method']='Cov'
est_Non=data.frame(rbind(colMeans(estimate_ab_Non,na.rm=T),
(colSds(estimate_ab_Non,na.rm=T))**2),row.names = c('mean','sd'))
est_Non['method']='Non'
est=rbind(est_Pscw,est_Pscov,est_Iptw,est_Cov,est_Non)
rm(est_Pscw,est_Pscov,est_Iptw,est_Cov,est_Non,estimate_ab_Cov,estimate_ab_Iptw,estimate_ab_Non,
estimate_ab_Pscov,estimate_ab_Pscw)
}
## MCP&testing estimation
choose=function(results)
{
M<-matrix(c(rep(0,4000)),500,8,dimnames = list(NULL,c("M1", "M2","M3", "M4","M5","M6","M7","M8")))
Mt<-matrix(c(rep(0,4000)),500,8,dimnames = list(NULL,c("M1", "M2","M3", "M4","M5","M6","M7","M8")))
for(i in 1:500){
M[i,1]<-"M1"%in%rownames(results[[i]])
M[i,2]<-"M2"%in%rownames(results[[i]])
M[i,3]<-"M3"%in%rownames(results[[i]])
M[i,4]<-"M4"%in%rownames(results[[i]])
M[i,5]<-"M5"%in%rownames(results[[i]])
M[i,6]<-"M6"%in%rownames(results[[i]])
M[i,7]<-"M7"%in%rownames(results[[i]])
M[i,8]<-"M8"%in%rownames(results[[i]])
Mt[i,1]<-"M1"%in%rownames(results[[i]]) & results[[i]]['M1','BH.FDR']<0.05
Mt[i,2]<-"M2"%in%rownames(results[[i]]) & results[[i]]['M2','BH.FDR']<0.05
Mt[i,3]<-"M3"%in%rownames(results[[i]]) & results[[i]]['M3','BH.FDR']<0.05
Mt[i,4]<-"M4"%in%rownames(results[[i]]) & results[[i]]['M4','BH.FDR']<0.05
Mt[i,5]<-"M5"%in%rownames(results[[i]]) & results[[i]]['M5','BH.FDR']<0.05
Mt[i,6]<-"M6"%in%rownames(results[[i]]) & results[[i]]['M6','BH.FDR']<0.05
Mt[i,7]<-"M7"%in%rownames(results[[i]]) & results[[i]]['M7','BH.FDR']<0.05
Mt[i,8]<-"M8"%in%rownames(results[[i]]) & results[[i]]['M8','BH.FDR']<0.05
}
return(data.frame(rbind(colSums(M),colSums(Mt)),row.names=c('MCPselection','Testing')))
}
{
Choose_Cov=data.frame(choose(results_Cov_n500p1000))
Choose_Cov['Method']='Cov'
Choose_Iptw=data.frame(choose(results_Iptw_n500p1000))
Choose_Iptw['Method']='Iptw'
Choose_Pscov=data.frame(choose(results_Pscov_n500p1000))
Choose_Pscov['Method']='Pscov'
Choose_Non=data.frame(choose(results_Non_n500p1000))
Choose_Non['Method']='Non'
Choose_Psuni=data.frame(choose(results_Pscw_n500p1000))
Choose_Psuni['Method']='Psuni'
MCPandtesting=data.frame(rbind(Choose_Cov,Choose_Iptw,Choose_Pscov,Choose_Non,Choose_Psuni))
rm(Choose_Cov,Choose_Iptw,Choose_Pscov,Choose_Non,Choose_Psuni)
}
rm(MCP_cov)
View(est)
View(MCPandtesting)
rm(Sel_cov)
rm(Test_cov)
View(MCPandtesting)
View(est)
View(est)
View(MCPandtesting)
# Internal function: parallel computing check
checkParallel <- function(program.name, parallel, ncore, verbose) {
if (parallel & (ncore > 1)) {
if (ncore > parallel::detectCores()) {
message("You requested ", ncore, " cores. There are only ",
parallel::detectCores(), " in your machine!")
ncore <- parallel::detectCores()
}
if (verbose)
message("    Running ", program.name, " with ", ncore, " cores in parallel...   (",
Sys.time(), ")")
doParallel::registerDoParallel(ncore)
} else {
if (verbose)
message("    Running ", program.name, " with single core...   (",
Sys.time(), ")")
registerDoSEQ()
}
}
## Internal function: doOne code generater
doOneGen <- function(model.text, colind.text) {
L <- length(eval(parse(text = colind.text)))
script <- paste0("doOne <- function(i, datarun, Ydat){datarun$Mone <- Ydat[,i]; model <- ",
model.text, ";if('try-error' %in% class(model)) b <- rep(NA, ",
L, ") else { res=summary(model)$coefficients; b <- res[2,", colind.text,
"]};invisible(b)}")
return(script)
}
## Internal function: create iterator for bulk matrix by column
iblkcol_lag <- function(M, ...) {
i <- 1
it <- iterators::idiv(ncol(M), ...)
nextEl <- function() {
n <- iterators::nextElem(it)
r <- seq(i, length = n)
i <<- i + n
M[, r, drop = FALSE]
}
obj <- list(nextElem = nextEl)
class(obj) <- c("abstractiter", "iter")
obj
}
## Internal function: scale data (obsolete function)
scaleto <- function(dat) {
if (is.null(dat))
return(list(dn = NULL, d = NULL, ds = NULL))
dat_scale <- scale(dat)
dat_names <- names(dat)
if (any(class(dat) %in% c("matrix", "data.frame", "data.table"))) {
dat_names <- colnames(dat)
dat <- as.matrix(data.frame(dat_scale))
} else {
dat_names <- names(dat)
dat <- as.numeric(dat_scale)
}
dat_scale <- as.numeric(attributes(dat_scale)[["scaled:scale"]])
return(list(dn = dat_names, d = dat, ds = dat_scale))
}
# Internal function: Sure Independent Screening
# Global variables:
globalVariables("n")
globalVariables("M_chunk")
himasis <- function(Y, M, X, COV, glm.family, modelstatement,
parallel, ncore, verbose, tag) {
L.M <- ncol(M)
M.names <- colnames(M)
X <- data.frame(X)
X <- data.frame(model.matrix(~., X))[, -1]
if (is.null(COV)) {
if (verbose) message("    No covariate is adjusted")
datarun <- data.frame(Y = Y, Mone = NA, X = X)
modelstatement <- modelstatement
} else {
COV <- data.frame(COV)
COV <- data.frame(model.matrix(~., COV))[, -1]
conf.names <- colnames(COV)
if (verbose) message("    Adjusting for covariate(s): ", paste0(conf.names, collapse = ", "))
datarun <- data.frame(Y = Y, Mone = NA, X = X, COV = COV)
modelstatement <- eval(parse(text = (paste0(modelstatement, "+",
paste0(paste0("COV.", conf.names), collapse = "+")))))
}
doOne <- eval(parse(text = doOneGen(paste0("try(glm(modelstatement, family = ",
glm.family, ", data = datarun))"), "c(1,4)")))
checkParallel(tag, parallel, ncore, verbose)
results <- foreach(n = iterators::idiv(L.M, chunks = ncore),
M_chunk = iblkcol_lag(M, chunks = ncore),
.combine = "cbind") %dopar% {sapply(seq_len(n), doOne, datarun, M_chunk)}
colnames(results) <- M.names
return(results)
}
#' High-dimensional Mediation Analysis
#'
#' \code{hima} is used to estimate and test high-dimensional mediation effects.
#'
#' @param X a vector of exposure.
#' @param Y a vector of outcome. Can be either continuous or binary (0-1).
#' @param M a \code{data.frame} or \code{matrix} of high-dimensional mediators. Rows represent samples, columns
#' represent variables.
#' @param COV.XM a \code{data.frame} or \code{matrix} of covariates dataset for testing the association \code{M ~ X}.
#' Covariates specified here will not participate penalization. Default = \code{NULL}. If the covariates
#' contain mixed data types, please make sure all categorical variables are properly formatted as \code{factor} type.
#' @param COV.MY a \code{data.frame} or \code{matrix} of covariates dataset for testing the association \code{Y ~ M}.
#' Covariates specified here will not participate penalization. If not specified, the same set of covariates for
#' \code{M ~ X} will be applied. Using different sets of covariates is allowed but this needs to be handled carefully.
#' @param family either 'gaussian' or 'binomial', depending on the data type of outcome (\code{Y}). See
#' \code{\link{ncvreg}}
#' @param penalty the penalty to be applied to the model. Either 'MCP' (the default), 'SCAD', or
#' 'lasso'. See \code{\link{ncvreg}}.
#' @param topN an integer specifying the number of top markers from sure independent screening.
#' Default = \code{NULL}. If \code{NULL}, \code{topN} will be either \code{ceiling(n/log(n))} if
#' \code{family = 'gaussian'}, or \code{ceiling(n/(2*log(n)))} if \code{family = 'binomial'},
#' where \code{n} is the sample size. If the sample size is greater than topN (pre-specified or calculated), all
#' mediators will be included in the test (i.e. low-dimensional scenario).
#' @param parallel logical. Enable parallel computing feature? Default = \code{TRUE}.
#' @param ncore number of cores to run parallel computing Valid when \code{parallel == TRUE}.
#' By default max number of cores available in the machine will be utilized.
#' @param verbose logical. Should the function be verbose? Default = \code{FALSE}.
#' @param ... other arguments passed to \code{\link{ncvreg}}.
#'
#' @return A data.frame containing mediation testing results of selected mediators.
#' \itemize{
#'     \item{alpha: }{coefficient estimates of exposure (X) --> mediators (M).}
#'     \item{beta: }{coefficient estimates of mediators (M) --> outcome (Y) (adjusted for exposure).}
#'     \item{gamma: }{coefficient estimates of exposure (X) --> outcome (Y) (total effect).}
#'     \item{alpha*beta: }{mediation effect.}
#'     \item{\% total effect: }{alpha*beta / gamma. Percentage of the mediation effect out of the total effect.}
#'     \item{adjusted.p: }{statistical significance of the mediator (Bonferroni procedure).}
#'     \item{BH.FDR: }{statistical significance of the mediator (Benjamini-Hochberg procedure).}
#' }
#'
#' @examples
#' n <- 100  # sample size
#' p <- 500 # the dimension of covariates
#'
#' # the regression coefficients alpha (exposure --> mediators)
#' alpha <- rep(0, p)
#'
#' # the regression coefficients beta (mediators --> outcome)
#' beta1 <- rep(0, p) # for continuous outcome
#' beta2 <- rep(0, p) # for binary outcome
#'
#' # the first four markers are true mediators
#' alpha[1:4] <- c(0.45,0.5,0.6,0.7)
#' beta1[1:4] <- c(0.55,0.6,0.65,0.7)
#' beta2[1:4] <- c(1.45,1.5,1.55,1.6)
#'
#' # these are not true mediators
#' alpha[7:8] <- 0.5
#' beta1[5:6] <- 0.8
#' beta2[5:6] <- 1.7
#'
#' # Generate simulation data
#' simdat_cont = simHIMA(n, p, alpha, beta1, seed=1029)
#' simdat_bin = simHIMA(n, p, alpha, beta2, binaryOutcome = TRUE, seed=1029)
#'
#' # Run HIMA with MCP penalty by default
#' # When Y is continuous (default)
#' hima.fit <- hima(simdat_cont$X, simdat_cont$Y, simdat_cont$M, verbose = TRUE)
#' head(hima.fit)
#'
#' # When Y is binary (should specify family)
#' hima.logistic.fit <- hima(simdat_bin$X, simdat_bin$Y, simdat_bin$M,
#' family = "binomial", verbose = TRUE)
#' head(hima.logistic.fit)
#'
#' @export
hima <- function(X, Y, M, COV.XM = NULL, COV.MY = COV.XM,
family = c("gaussian", "binomial"),
penalty = c("MCP", "SCAD", "lasso"),
topN = NULL,
parallel = FALSE,
ncore = 1,
verbose = FALSE,
...) {
family <- match.arg(family)
penalty <- match.arg(penalty)
if (parallel & (ncore == 1)) ncore <- parallel::detectCores()
n <- nrow(M)
p <- ncol(M)
if (is.null(topN)) {
if (family == "binomial") d <- ceiling(n/(2*log(n))) else d <- ceiling(2 * n/log(n))
} else {
d <- topN  # the number of top mediators that associated with exposure (X)
}
d <- min(p, d) # if d > p select all mediators
#########################################################################
################################ STEP 1 #################################
#########################################################################
message("Step 1: Sure Independent Screening ...", "     (", Sys.time(), ")")
if(family == "binomial")
{
# Screen M using X given the limited information provided by Y (binary)
# Therefore the family is still gaussian
if(verbose) message("    Screening M using the association between X and M: ", appendLF = FALSE)
alpha = SIS_Results <- himasis(NA, M, X, COV.XM, glm.family = "gaussian", modelstatement = "Mone ~ X",
parallel = parallel, ncore = ncore, verbose, tag = "Sure Independent Screening")
SIS_Pvalue <- SIS_Results[2,]
} else if (family == "gaussian"){
# Screen M using Y (continuous)
if(verbose) message("    Screening M using the association between M and Y: ", appendLF = FALSE)
SIS_Results <- himasis(Y, M, X, COV.MY, glm.family = family, modelstatement = "Y ~ Mone + X",
parallel = parallel, ncore = ncore, verbose, tag = "Sure Independent Screening")
SIS_Pvalue <- SIS_Results[2,]
} else {
stop(paste0("Family ", family, " is not supported."))
}
# Note: ranking using p on un-standardized data is equivalent to ranking using beta on standardized data
SIS_Pvalue_sort <- sort(SIS_Pvalue)
ID <- which(SIS_Pvalue <= SIS_Pvalue_sort[d])  # the index of top mediators
if(verbose) message("    Top ", length(ID), " mediators are selected: ", paste0(names(SIS_Pvalue_sort[seq_len(d)]), collapse = ","))
M_SIS <- M[, ID]
XM <- cbind(M_SIS, X)
#########################################################################
################################ STEP 2 #################################
#########################################################################
message("Step 2: Penalized estimate (", penalty, ") ...", "     (", Sys.time(), ")")
## Based on the screening results in step 1. We will find the most influential M on Y.
if (is.null(COV.MY)) {
fit <- ncvreg(XM, Y, family = family,
penalty = penalty,
penalty.factor = c(rep(1, ncol(M_SIS)), 0), ...)
} else {
COV.MY <- data.frame(COV.MY)
COV.MY <- data.frame(model.matrix(~., COV.MY))[, -1]
conf.names <- colnames(COV.MY)
if (verbose) message("    Adjusting for covariate(s): ", paste0(conf.names, collapse = ", "))
XM_COV <- cbind(XM, COV.MY)
fit <- ncvreg(XM_COV, Y, family = family,
penalty = penalty,
penalty.factor = c(rep(1, ncol(M_SIS)), rep(0, 1 + ncol(COV.MY))), ...)
}
# plot(fit)
lam <- fit$lambda[which.min(BIC(fit))]
if(verbose) message("    Tuning parameter lambda selected: ", lam)
Coefficients <- coef(fit, lambda = lam)
est <- Coefficients[2:(d + 1)]
ID_1_non <- which(est != 0)
if(length(ID_1_non) == 0)
{
if(verbose) message("    All ", penalty, " beta estimates of the ", length(ID), " mediators are zero. Please check ncvreg package for more options (?ncvreg).")
} else {
if(verbose) message("    Non-zero ", penalty, " beta estimate(s) of mediator(s) found: ", paste0(names(ID_1_non), collapse = ","))
beta_est <- est[ID_1_non]  # The non-zero MCP estimators of beta
ID_test <- ID[ID_1_non]  # The index of the ID of non-zero beta in Y ~ M
##
if(family == "binomial")
{
## This has been done in step 1 (when Y is binary)
alpha <- alpha[,ID_test, drop = FALSE]
} else {
if(verbose) message("    Estimating alpha (effect of X on M): ", appendLF = FALSE)
alpha <- himasis(NA, M[, ID_test, drop = FALSE], X, COV.XM, glm.family = "gaussian",
modelstatement = "Mone ~ X", parallel = FALSE, ncore = ncore,
verbose, tag = "site-by-site ordinary least squares estimation")
}
#########################################################################
################################ STEP 3 #################################
#########################################################################
if(verbose) message("Step 3: Joint significance test ...", "     (", Sys.time(), ")")
alpha_est_ID_test <- as.numeric(alpha[1, ])  #  the estimator for alpha
P_adjust_alpha <- length(ID_test) * alpha[2, ]  # the adjusted p-value for alpha (bonferroni)
P_adjust_alpha[P_adjust_alpha > 1] <- 1
P_fdr_alpha <- p.adjust(alpha[2, ], "fdr")  # the adjusted p-value for alpha (FDR)
alpha_est <- alpha_est_ID_test
## Post-test based on the oracle property of the MCP penalty
if (is.null(COV.MY)) {
YMX <- data.frame(Y = Y, M[, ID_test, drop = FALSE], X = X)
} else {
YMX <- data.frame(Y = Y, M[, ID_test, drop = FALSE], X = X, COV.MY)
}
res <- summary(glm(Y ~ ., family = family, data = YMX))$coefficients
est <- res[2:(length(ID_test) + 1), 1]  # the estimator for beta
P_adjust_beta <- length(ID_test) * res[2:(length(ID_test) + 1), 4]  # the adjused p-value for beta (bonferroni)
P_adjust_beta[P_adjust_beta > 1] <- 1
P_fdr_beta <- p.adjust(res[2:(length(ID_test) + 1), 4], "fdr")  # the adjusted p-value for beta (FDR)
ab_est <- alpha_est * beta_est
## Use the maximum value as p value
PA <- rbind(P_adjust_beta, P_adjust_alpha)
P_value <- apply(PA, 2, max)
FDRA <- rbind(P_fdr_beta, P_fdr_alpha)
FDR <- apply(FDRA, 2, max)
# Total effect
if (is.null(COV.MY)) {
YX <- data.frame(Y = Y, X = X)
} else {
YX <- data.frame(Y = Y, X = X, COV.MY)
}
gamma_est <- coef(glm(Y ~ ., family = family, data = YX))[2]
results <- data.frame(alpha = alpha_est, beta = beta_est, gamma = gamma_est,
`alpha*beta` = ab_est, `% total effect` = ab_est/gamma_est * 100,
`adjusted.p` = P_value, `BH.FDR` = FDR, check.names = FALSE)
message("Done!", "     (", Sys.time(), ")")
doParallel::stopImplicitCluster()
return(results)
}
}
fpr_num=function(results){
fpr<-c()
for (j in 1:500)
{
miss<-c()
fp<-setdiff(rownames(results[[j]]),c("M1", "M2","M3", "M4",'M5','M6','M7','M8'))
for (i in 1:length(fp))
{
miss[i]=results[[j]][fp[i],'BH.FDR']<0.05
fpr[j]<-sum(miss)
}
}
return(mean(fpr))
}
Fpr=rbind(fpr_num(results_Cov_n500p1000),fpr_num(results_Pscov_n500p1000),
fpr_num(results_Iptw_n500p1000),fpr_num(results_Pscw_n500p1000),fpr_num(results_Non_n500p1000))
Fpr=data.frame(Fpr,
row.names=c('Cov','Pscov','Iptw','Pscw','Non'))
Fpr
View(MCPandtesting)
est[which(est$method=='Pscov')]
est[which(est$method=='Cov'),]
est[which(est$method=='Pscov'),]
est[which(est$method=='Iptw'),]
est[which(est$method=='Pscw'),]
# 假阳性-平均每一次假阳性个数
fpr_num=function(results){
fpr<-c()
for (j in 1:500)
{
# results = results_Cov_n300p10000
miss<-c()
fp<-setdiff(rownames(results[[j]]),c("M1", "M2","M3", "M4",'M5','M6','M7','M8'))
for (i in 1:length(fp))
{
miss[i]=results[[j]][fp[i],'BH.FDR']<0.05
fpr[j]<-sum(miss)
}
}
return(mean(fpr))
}
# FDR (假阳性/总阳性)
FDR=function(results){
fpr<-c()
tp<-c()
fdr<-c()
for (j in 1:500)
{
#results = results_Iptw_n300p10000
miss<-c()
fp<-setdiff(rownames(results[[j]]),c("M1", "M2","M3", "M4",'M5','M6','M7','M8'))
for (i in 1:length(fp))
{
miss[i]=results[[j]][fp[i],'BH.FDR']<0.05
fpr[j]<-sum(miss)
}
tp[j] = sum(results[[j]][,'BH.FDR']<0.05)
}
return(mean(fpr/tp,na.rm = TRUE))
}
Fpr
Fpr=rbind(fpr_num(results_Cov_n500p1000),fpr_num(results_Pscov_n500p1000),
fpr_num(results_Iptw_n500p1000),fpr_num(results_Pscw_n500p1000),fpr_num(results_Non_n500p1000))
Fpr=data.frame(Fpr,
row.names=c('Cov','Pscov','Iptw','Pscw','Non'))
Fpr
# FDR - 每一次假阳性比例
Fdr=rbind(FDR(results_Cov_n500p1000),FDR(results_Pscov_n500p1000),
FDR(results_Iptw_n500p1000),FDR(results_Pscw_n500p1000),FDR(results_Non_n500p1000))
Fdr=data.frame(Fdr,
row.names=c('Cov','Pscov','Iptw','Pscw','Non'))
Fdr
